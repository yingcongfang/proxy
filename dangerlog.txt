Exception guarantee: basic

About use:

When GET some large website, user might need to refresh the page for several times to
get the page. 

About external failure:

if we encounter 400, 404, 502 situations, the program will send this to client and let them know


About cache:

Our cache can't handle the revalidation process. 

1)What if the user GET a web page with cached video or something very large, (Scalability)

Our cache might take up too much space in main memory, because our Least Recent Used strategy
only limit the entries of caches, but didn't check the whole memory taken by the cache.

2)What if the malicious user hacked our proxy cache, (Security)
The malicious user might change the content of the cache, and inject malicius code in cache.

3)What if our proxy is shut down by accidents, (Resilience)
All the cache would gone, because they are all only inside main memory instead of disk. However
the impact wouldn't be much, because this would only result in slow performance at the first few
request, but back to normal after cached once for each content.


About Multi-thread:
Multi-thread might cause data race condition, I use mutex to give synchronization for the cache writing
to avoid this situation.


About socket:
When the proxy begin to work, we connect the socket to client and when we get the request from client,
we parse it and get hostname and method. This process might fail in the program. And if the failure happened,
this thread will return and throw error to the scene.
